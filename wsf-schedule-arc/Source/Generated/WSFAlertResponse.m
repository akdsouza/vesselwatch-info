/*
	WSFAlertResponse.h
	The implementation of properties and methods for the WSFAlertResponse object.
	Generated by SudzC.com
*/
#import "WSFAlertResponse.h"

#import "WSFArrayOfInt.h"
@implementation WSFAlertResponse
	@synthesize BulletinID = _BulletinID;
	@synthesize BulletinFlag = _BulletinFlag;
	@synthesize BulletinText = _BulletinText;
	@synthesize CommunicationFlag = _CommunicationFlag;
	@synthesize CommunicationText = _CommunicationText;
	@synthesize RouteAlertFlag = _RouteAlertFlag;
	@synthesize RouteAlertText = _RouteAlertText;
	@synthesize HomepageAlertText = _HomepageAlertText;
	@synthesize PublishDate = _PublishDate;
	@synthesize DisruptionDescription = _DisruptionDescription;
	@synthesize AllRoutesFlag = _AllRoutesFlag;
	@synthesize SortSeq = _SortSeq;
	@synthesize AlertTypeID = _AlertTypeID;
	@synthesize AlertType = _AlertType;
	@synthesize AlertFullTitle = _AlertFullTitle;
	@synthesize AffectedRouteIDs = _AffectedRouteIDs;

	- (id) init
	{
		if(self = [super init])
		{
			self.BulletinText = nil;
			self.CommunicationText = nil;
			self.RouteAlertText = nil;
			self.HomepageAlertText = nil;
			self.PublishDate = nil;
			self.DisruptionDescription = nil;
			self.AlertType = nil;
			self.AlertFullTitle = nil;
			self.AffectedRouteIDs = [[NSMutableArray alloc] init];

		}
		return self;
	}

	+ (WSFAlertResponse*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (WSFAlertResponse*)[[WSFAlertResponse alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.BulletinID = [[Soap getNodeValue: node withName: @"BulletinID"] intValue];
			self.BulletinFlag = [[Soap getNodeValue: node withName: @"BulletinFlag"] boolValue];
			self.BulletinText = [Soap getNodeValue: node withName: @"BulletinText"];
			self.CommunicationFlag = [[Soap getNodeValue: node withName: @"CommunicationFlag"] boolValue];
			self.CommunicationText = [Soap getNodeValue: node withName: @"CommunicationText"];
			self.RouteAlertFlag = [[Soap getNodeValue: node withName: @"RouteAlertFlag"] boolValue];
			self.RouteAlertText = [Soap getNodeValue: node withName: @"RouteAlertText"];
			self.HomepageAlertText = [Soap getNodeValue: node withName: @"HomepageAlertText"];
			self.PublishDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"PublishDate"]];
			self.DisruptionDescription = [Soap getNodeValue: node withName: @"DisruptionDescription"];
			self.AllRoutesFlag = [[Soap getNodeValue: node withName: @"AllRoutesFlag"] boolValue];
			self.SortSeq = [[Soap getNodeValue: node withName: @"SortSeq"] intValue];
			self.AlertTypeID = [[Soap getNodeValue: node withName: @"AlertTypeID"] intValue];
			self.AlertType = [Soap getNodeValue: node withName: @"AlertType"];
			self.AlertFullTitle = [Soap getNodeValue: node withName: @"AlertFullTitle"];
			self.AffectedRouteIDs = [[WSFArrayOfInt createWithNode: [Soap getNode: node withName: @"AffectedRouteIDs"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"AlertResponse"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<BulletinID>%@</BulletinID>", [NSString stringWithFormat: @"%i", self.BulletinID]];
		[s appendFormat: @"<BulletinFlag>%@</BulletinFlag>", (self.BulletinFlag)?@"true":@"false"];
		if (self.BulletinText != nil) [s appendFormat: @"<BulletinText>%@</BulletinText>", [[self.BulletinText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<CommunicationFlag>%@</CommunicationFlag>", (self.CommunicationFlag)?@"true":@"false"];
		if (self.CommunicationText != nil) [s appendFormat: @"<CommunicationText>%@</CommunicationText>", [[self.CommunicationText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<RouteAlertFlag>%@</RouteAlertFlag>", (self.RouteAlertFlag)?@"true":@"false"];
		if (self.RouteAlertText != nil) [s appendFormat: @"<RouteAlertText>%@</RouteAlertText>", [[self.RouteAlertText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.HomepageAlertText != nil) [s appendFormat: @"<HomepageAlertText>%@</HomepageAlertText>", [[self.HomepageAlertText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PublishDate != nil) [s appendFormat: @"<PublishDate>%@</PublishDate>", [Soap getDateString: self.PublishDate]];
		if (self.DisruptionDescription != nil) [s appendFormat: @"<DisruptionDescription>%@</DisruptionDescription>", [[self.DisruptionDescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<AllRoutesFlag>%@</AllRoutesFlag>", (self.AllRoutesFlag)?@"true":@"false"];
		[s appendFormat: @"<SortSeq>%@</SortSeq>", [NSString stringWithFormat: @"%i", self.SortSeq]];
		[s appendFormat: @"<AlertTypeID>%@</AlertTypeID>", [NSString stringWithFormat: @"%i", self.AlertTypeID]];
		if (self.AlertType != nil) [s appendFormat: @"<AlertType>%@</AlertType>", [[self.AlertType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AlertFullTitle != nil) [s appendFormat: @"<AlertFullTitle>%@</AlertFullTitle>", [[self.AlertFullTitle stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AffectedRouteIDs != nil && self.AffectedRouteIDs.count > 0) {
			[s appendFormat: @"<AffectedRouteIDs>%@</AffectedRouteIDs>", [WSFArrayOfInt serialize: self.AffectedRouteIDs]];
		} else {
			[s appendString: @"<AffectedRouteIDs/>"];
		}

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[WSFAlertResponse class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
